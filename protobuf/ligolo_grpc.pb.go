// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.2
// source: protobuf/ligolo.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Ligolo_Join_FullMethodName          = "/ligolo.Ligolo/Join"
	Ligolo_ListAgents_FullMethodName    = "/ligolo.Ligolo/ListAgents"
	Ligolo_RenameAgent_FullMethodName   = "/ligolo.Ligolo/RenameAgent"
	Ligolo_NewTun_FullMethodName        = "/ligolo.Ligolo/NewTun"
	Ligolo_DelTun_FullMethodName        = "/ligolo.Ligolo/DelTun"
	Ligolo_ListTuns_FullMethodName      = "/ligolo.Ligolo/ListTuns"
	Ligolo_RenameTun_FullMethodName     = "/ligolo.Ligolo/RenameTun"
	Ligolo_NewRoute_FullMethodName      = "/ligolo.Ligolo/NewRoute"
	Ligolo_DelRoute_FullMethodName      = "/ligolo.Ligolo/DelRoute"
	Ligolo_NewListener_FullMethodName   = "/ligolo.Ligolo/NewListener"
	Ligolo_DelListener_FullMethodName   = "/ligolo.Ligolo/DelListener"
	Ligolo_ListListeners_FullMethodName = "/ligolo.Ligolo/ListListeners"
	Ligolo_RelayStart_FullMethodName    = "/ligolo.Ligolo/RelayStart"
	Ligolo_RelayStop_FullMethodName     = "/ligolo.Ligolo/RelayStop"
	Ligolo_GenerateAgent_FullMethodName = "/ligolo.Ligolo/GenerateAgent"
	Ligolo_ListCerts_FullMethodName     = "/ligolo.Ligolo/ListCerts"
	Ligolo_RegenCerts_FullMethodName    = "/ligolo.Ligolo/RegenCerts"
)

// LigoloClient is the client API for Ligolo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LigoloClient interface {
	Join(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ligolo_JoinClient, error)
	ListAgents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAgentsResp, error)
	RenameAgent(ctx context.Context, in *RenameAgentReq, opts ...grpc.CallOption) (*Empty, error)
	NewTun(ctx context.Context, in *NewTunReq, opts ...grpc.CallOption) (*Empty, error)
	DelTun(ctx context.Context, in *DelTunReq, opts ...grpc.CallOption) (*Empty, error)
	ListTuns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTunsResp, error)
	RenameTun(ctx context.Context, in *RenameTunReq, opts ...grpc.CallOption) (*Empty, error)
	NewRoute(ctx context.Context, in *NewRouteReq, opts ...grpc.CallOption) (*NewRouteResp, error)
	DelRoute(ctx context.Context, in *DelRouteReq, opts ...grpc.CallOption) (*Empty, error)
	NewListener(ctx context.Context, in *NewListenerReq, opts ...grpc.CallOption) (*Empty, error)
	DelListener(ctx context.Context, in *DelListenerReq, opts ...grpc.CallOption) (*Empty, error)
	ListListeners(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListListenersResp, error)
	RelayStart(ctx context.Context, in *RelayStartReq, opts ...grpc.CallOption) (*Empty, error)
	RelayStop(ctx context.Context, in *RelayStopReq, opts ...grpc.CallOption) (*Empty, error)
	GenerateAgent(ctx context.Context, in *GenerateAgentReq, opts ...grpc.CallOption) (*GenerateAgentResp, error)
	ListCerts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCertsResp, error)
	RegenCerts(ctx context.Context, in *RegenCertsReq, opts ...grpc.CallOption) (*Empty, error)
}

type ligoloClient struct {
	cc grpc.ClientConnInterface
}

func NewLigoloClient(cc grpc.ClientConnInterface) LigoloClient {
	return &ligoloClient{cc}
}

func (c *ligoloClient) Join(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ligolo_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ligolo_ServiceDesc.Streams[0], Ligolo_Join_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &ligoloJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ligolo_JoinClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type ligoloJoinClient struct {
	grpc.ClientStream
}

func (x *ligoloJoinClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ligoloClient) ListAgents(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListAgentsResp, error) {
	out := new(ListAgentsResp)
	err := c.cc.Invoke(ctx, Ligolo_ListAgents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RenameAgent(ctx context.Context, in *RenameAgentReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_RenameAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) NewTun(ctx context.Context, in *NewTunReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_NewTun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) DelTun(ctx context.Context, in *DelTunReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_DelTun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) ListTuns(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListTunsResp, error) {
	out := new(ListTunsResp)
	err := c.cc.Invoke(ctx, Ligolo_ListTuns_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RenameTun(ctx context.Context, in *RenameTunReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_RenameTun_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) NewRoute(ctx context.Context, in *NewRouteReq, opts ...grpc.CallOption) (*NewRouteResp, error) {
	out := new(NewRouteResp)
	err := c.cc.Invoke(ctx, Ligolo_NewRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) DelRoute(ctx context.Context, in *DelRouteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_DelRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) NewListener(ctx context.Context, in *NewListenerReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_NewListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) DelListener(ctx context.Context, in *DelListenerReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_DelListener_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) ListListeners(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListListenersResp, error) {
	out := new(ListListenersResp)
	err := c.cc.Invoke(ctx, Ligolo_ListListeners_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RelayStart(ctx context.Context, in *RelayStartReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_RelayStart_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RelayStop(ctx context.Context, in *RelayStopReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_RelayStop_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) GenerateAgent(ctx context.Context, in *GenerateAgentReq, opts ...grpc.CallOption) (*GenerateAgentResp, error) {
	out := new(GenerateAgentResp)
	err := c.cc.Invoke(ctx, Ligolo_GenerateAgent_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) ListCerts(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ListCertsResp, error) {
	out := new(ListCertsResp)
	err := c.cc.Invoke(ctx, Ligolo_ListCerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RegenCerts(ctx context.Context, in *RegenCertsReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, Ligolo_RegenCerts_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LigoloServer is the server API for Ligolo service.
// All implementations must embed UnimplementedLigoloServer
// for forward compatibility
type LigoloServer interface {
	Join(*Empty, Ligolo_JoinServer) error
	ListAgents(context.Context, *Empty) (*ListAgentsResp, error)
	RenameAgent(context.Context, *RenameAgentReq) (*Empty, error)
	NewTun(context.Context, *NewTunReq) (*Empty, error)
	DelTun(context.Context, *DelTunReq) (*Empty, error)
	ListTuns(context.Context, *Empty) (*ListTunsResp, error)
	RenameTun(context.Context, *RenameTunReq) (*Empty, error)
	NewRoute(context.Context, *NewRouteReq) (*NewRouteResp, error)
	DelRoute(context.Context, *DelRouteReq) (*Empty, error)
	NewListener(context.Context, *NewListenerReq) (*Empty, error)
	DelListener(context.Context, *DelListenerReq) (*Empty, error)
	ListListeners(context.Context, *Empty) (*ListListenersResp, error)
	RelayStart(context.Context, *RelayStartReq) (*Empty, error)
	RelayStop(context.Context, *RelayStopReq) (*Empty, error)
	GenerateAgent(context.Context, *GenerateAgentReq) (*GenerateAgentResp, error)
	ListCerts(context.Context, *Empty) (*ListCertsResp, error)
	RegenCerts(context.Context, *RegenCertsReq) (*Empty, error)
	mustEmbedUnimplementedLigoloServer()
}

// UnimplementedLigoloServer must be embedded to have forward compatible implementations.
type UnimplementedLigoloServer struct {
}

func (UnimplementedLigoloServer) Join(*Empty, Ligolo_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedLigoloServer) ListAgents(context.Context, *Empty) (*ListAgentsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAgents not implemented")
}
func (UnimplementedLigoloServer) RenameAgent(context.Context, *RenameAgentReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameAgent not implemented")
}
func (UnimplementedLigoloServer) NewTun(context.Context, *NewTunReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewTun not implemented")
}
func (UnimplementedLigoloServer) DelTun(context.Context, *DelTunReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTun not implemented")
}
func (UnimplementedLigoloServer) ListTuns(context.Context, *Empty) (*ListTunsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTuns not implemented")
}
func (UnimplementedLigoloServer) RenameTun(context.Context, *RenameTunReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameTun not implemented")
}
func (UnimplementedLigoloServer) NewRoute(context.Context, *NewRouteReq) (*NewRouteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewRoute not implemented")
}
func (UnimplementedLigoloServer) DelRoute(context.Context, *DelRouteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoute not implemented")
}
func (UnimplementedLigoloServer) NewListener(context.Context, *NewListenerReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewListener not implemented")
}
func (UnimplementedLigoloServer) DelListener(context.Context, *DelListenerReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelListener not implemented")
}
func (UnimplementedLigoloServer) ListListeners(context.Context, *Empty) (*ListListenersResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListListeners not implemented")
}
func (UnimplementedLigoloServer) RelayStart(context.Context, *RelayStartReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayStart not implemented")
}
func (UnimplementedLigoloServer) RelayStop(context.Context, *RelayStopReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RelayStop not implemented")
}
func (UnimplementedLigoloServer) GenerateAgent(context.Context, *GenerateAgentReq) (*GenerateAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAgent not implemented")
}
func (UnimplementedLigoloServer) ListCerts(context.Context, *Empty) (*ListCertsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCerts not implemented")
}
func (UnimplementedLigoloServer) RegenCerts(context.Context, *RegenCertsReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenCerts not implemented")
}
func (UnimplementedLigoloServer) mustEmbedUnimplementedLigoloServer() {}

// UnsafeLigoloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LigoloServer will
// result in compilation errors.
type UnsafeLigoloServer interface {
	mustEmbedUnimplementedLigoloServer()
}

func RegisterLigoloServer(s grpc.ServiceRegistrar, srv LigoloServer) {
	s.RegisterService(&Ligolo_ServiceDesc, srv)
}

func _Ligolo_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LigoloServer).Join(m, &ligoloJoinServer{stream})
}

type Ligolo_JoinServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type ligoloJoinServer struct {
	grpc.ServerStream
}

func (x *ligoloJoinServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Ligolo_ListAgents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).ListAgents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_ListAgents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).ListAgents(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RenameAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RenameAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_RenameAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RenameAgent(ctx, req.(*RenameAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_NewTun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTunReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).NewTun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_NewTun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).NewTun(ctx, req.(*NewTunReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_DelTun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTunReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).DelTun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_DelTun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).DelTun(ctx, req.(*DelTunReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_ListTuns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).ListTuns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_ListTuns_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).ListTuns(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RenameTun_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameTunReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RenameTun(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_RenameTun_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RenameTun(ctx, req.(*RenameTunReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_NewRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).NewRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_NewRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).NewRoute(ctx, req.(*NewRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_DelRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).DelRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_DelRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).DelRoute(ctx, req.(*DelRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_NewListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).NewListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_NewListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).NewListener(ctx, req.(*NewListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_DelListener_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelListenerReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).DelListener(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_DelListener_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).DelListener(ctx, req.(*DelListenerReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_ListListeners_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).ListListeners(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_ListListeners_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).ListListeners(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RelayStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayStartReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RelayStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_RelayStart_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RelayStart(ctx, req.(*RelayStartReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RelayStop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RelayStopReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RelayStop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_RelayStop_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RelayStop(ctx, req.(*RelayStopReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_GenerateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).GenerateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_GenerateAgent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).GenerateAgent(ctx, req.(*GenerateAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_ListCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).ListCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_ListCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).ListCerts(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RegenCerts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenCertsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RegenCerts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Ligolo_RegenCerts_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RegenCerts(ctx, req.(*RegenCertsReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ligolo_ServiceDesc is the grpc.ServiceDesc for Ligolo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ligolo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligolo.Ligolo",
	HandlerType: (*LigoloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListAgents",
			Handler:    _Ligolo_ListAgents_Handler,
		},
		{
			MethodName: "RenameAgent",
			Handler:    _Ligolo_RenameAgent_Handler,
		},
		{
			MethodName: "NewTun",
			Handler:    _Ligolo_NewTun_Handler,
		},
		{
			MethodName: "DelTun",
			Handler:    _Ligolo_DelTun_Handler,
		},
		{
			MethodName: "ListTuns",
			Handler:    _Ligolo_ListTuns_Handler,
		},
		{
			MethodName: "RenameTun",
			Handler:    _Ligolo_RenameTun_Handler,
		},
		{
			MethodName: "NewRoute",
			Handler:    _Ligolo_NewRoute_Handler,
		},
		{
			MethodName: "DelRoute",
			Handler:    _Ligolo_DelRoute_Handler,
		},
		{
			MethodName: "NewListener",
			Handler:    _Ligolo_NewListener_Handler,
		},
		{
			MethodName: "DelListener",
			Handler:    _Ligolo_DelListener_Handler,
		},
		{
			MethodName: "ListListeners",
			Handler:    _Ligolo_ListListeners_Handler,
		},
		{
			MethodName: "RelayStart",
			Handler:    _Ligolo_RelayStart_Handler,
		},
		{
			MethodName: "RelayStop",
			Handler:    _Ligolo_RelayStop_Handler,
		},
		{
			MethodName: "GenerateAgent",
			Handler:    _Ligolo_GenerateAgent_Handler,
		},
		{
			MethodName: "ListCerts",
			Handler:    _Ligolo_ListCerts_Handler,
		},
		{
			MethodName: "RegenCerts",
			Handler:    _Ligolo_RegenCerts_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Ligolo_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/ligolo.proto",
}
