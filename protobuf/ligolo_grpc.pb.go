// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: protobuf/ligolo.proto

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LigoloClient is the client API for Ligolo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LigoloClient interface {
	Join(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ligolo_JoinClient, error)
	GetSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSessionsResp, error)
	RenameSession(ctx context.Context, in *RenameSessionReq, opts ...grpc.CallOption) (*Empty, error)
	KillSession(ctx context.Context, in *KillSessionReq, opts ...grpc.CallOption) (*Empty, error)
	StartRelay(ctx context.Context, in *StartRelayReq, opts ...grpc.CallOption) (*Empty, error)
	StopRelay(ctx context.Context, in *StopRelayReq, opts ...grpc.CallOption) (*Empty, error)
	AddRoute(ctx context.Context, in *AddRouteReq, opts ...grpc.CallOption) (*AddRouteResp, error)
	DelRoute(ctx context.Context, in *DelRouteReq, opts ...grpc.CallOption) (*Empty, error)
	AddRedirector(ctx context.Context, in *AddRedirectorReq, opts ...grpc.CallOption) (*Empty, error)
	DelRedirector(ctx context.Context, in *DelRedirectorReq, opts ...grpc.CallOption) (*Empty, error)
	RegenCert(ctx context.Context, in *RegenCertReq, opts ...grpc.CallOption) (*Empty, error)
	NewOperator(ctx context.Context, in *NewOperatorReq, opts ...grpc.CallOption) (*NewOperatorResp, error)
	GenerateAgent(ctx context.Context, in *GenerateAgentReq, opts ...grpc.CallOption) (*GenerateAgentResp, error)
}

type ligoloClient struct {
	cc grpc.ClientConnInterface
}

func NewLigoloClient(cc grpc.ClientConnInterface) LigoloClient {
	return &ligoloClient{cc}
}

func (c *ligoloClient) Join(ctx context.Context, in *Empty, opts ...grpc.CallOption) (Ligolo_JoinClient, error) {
	stream, err := c.cc.NewStream(ctx, &Ligolo_ServiceDesc.Streams[0], "/ligolo.Ligolo/Join", opts...)
	if err != nil {
		return nil, err
	}
	x := &ligoloJoinClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Ligolo_JoinClient interface {
	Recv() (*Event, error)
	grpc.ClientStream
}

type ligoloJoinClient struct {
	grpc.ClientStream
}

func (x *ligoloJoinClient) Recv() (*Event, error) {
	m := new(Event)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ligoloClient) GetSessions(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*GetSessionsResp, error) {
	out := new(GetSessionsResp)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/GetSessions", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RenameSession(ctx context.Context, in *RenameSessionReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/RenameSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) KillSession(ctx context.Context, in *KillSessionReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/KillSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) StartRelay(ctx context.Context, in *StartRelayReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/StartRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) StopRelay(ctx context.Context, in *StopRelayReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/StopRelay", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) AddRoute(ctx context.Context, in *AddRouteReq, opts ...grpc.CallOption) (*AddRouteResp, error) {
	out := new(AddRouteResp)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/AddRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) DelRoute(ctx context.Context, in *DelRouteReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/DelRoute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) AddRedirector(ctx context.Context, in *AddRedirectorReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/AddRedirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) DelRedirector(ctx context.Context, in *DelRedirectorReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/DelRedirector", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) RegenCert(ctx context.Context, in *RegenCertReq, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/RegenCert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) NewOperator(ctx context.Context, in *NewOperatorReq, opts ...grpc.CallOption) (*NewOperatorResp, error) {
	out := new(NewOperatorResp)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/NewOperator", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ligoloClient) GenerateAgent(ctx context.Context, in *GenerateAgentReq, opts ...grpc.CallOption) (*GenerateAgentResp, error) {
	out := new(GenerateAgentResp)
	err := c.cc.Invoke(ctx, "/ligolo.Ligolo/GenerateAgent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LigoloServer is the server API for Ligolo service.
// All implementations must embed UnimplementedLigoloServer
// for forward compatibility
type LigoloServer interface {
	Join(*Empty, Ligolo_JoinServer) error
	GetSessions(context.Context, *Empty) (*GetSessionsResp, error)
	RenameSession(context.Context, *RenameSessionReq) (*Empty, error)
	KillSession(context.Context, *KillSessionReq) (*Empty, error)
	StartRelay(context.Context, *StartRelayReq) (*Empty, error)
	StopRelay(context.Context, *StopRelayReq) (*Empty, error)
	AddRoute(context.Context, *AddRouteReq) (*AddRouteResp, error)
	DelRoute(context.Context, *DelRouteReq) (*Empty, error)
	AddRedirector(context.Context, *AddRedirectorReq) (*Empty, error)
	DelRedirector(context.Context, *DelRedirectorReq) (*Empty, error)
	RegenCert(context.Context, *RegenCertReq) (*Empty, error)
	NewOperator(context.Context, *NewOperatorReq) (*NewOperatorResp, error)
	GenerateAgent(context.Context, *GenerateAgentReq) (*GenerateAgentResp, error)
	mustEmbedUnimplementedLigoloServer()
}

// UnimplementedLigoloServer must be embedded to have forward compatible implementations.
type UnimplementedLigoloServer struct {
}

func (UnimplementedLigoloServer) Join(*Empty, Ligolo_JoinServer) error {
	return status.Errorf(codes.Unimplemented, "method Join not implemented")
}
func (UnimplementedLigoloServer) GetSessions(context.Context, *Empty) (*GetSessionsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSessions not implemented")
}
func (UnimplementedLigoloServer) RenameSession(context.Context, *RenameSessionReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameSession not implemented")
}
func (UnimplementedLigoloServer) KillSession(context.Context, *KillSessionReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KillSession not implemented")
}
func (UnimplementedLigoloServer) StartRelay(context.Context, *StartRelayReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartRelay not implemented")
}
func (UnimplementedLigoloServer) StopRelay(context.Context, *StopRelayReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StopRelay not implemented")
}
func (UnimplementedLigoloServer) AddRoute(context.Context, *AddRouteReq) (*AddRouteResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRoute not implemented")
}
func (UnimplementedLigoloServer) DelRoute(context.Context, *DelRouteReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRoute not implemented")
}
func (UnimplementedLigoloServer) AddRedirector(context.Context, *AddRedirectorReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddRedirector not implemented")
}
func (UnimplementedLigoloServer) DelRedirector(context.Context, *DelRedirectorReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelRedirector not implemented")
}
func (UnimplementedLigoloServer) RegenCert(context.Context, *RegenCertReq) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegenCert not implemented")
}
func (UnimplementedLigoloServer) NewOperator(context.Context, *NewOperatorReq) (*NewOperatorResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewOperator not implemented")
}
func (UnimplementedLigoloServer) GenerateAgent(context.Context, *GenerateAgentReq) (*GenerateAgentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateAgent not implemented")
}
func (UnimplementedLigoloServer) mustEmbedUnimplementedLigoloServer() {}

// UnsafeLigoloServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LigoloServer will
// result in compilation errors.
type UnsafeLigoloServer interface {
	mustEmbedUnimplementedLigoloServer()
}

func RegisterLigoloServer(s grpc.ServiceRegistrar, srv LigoloServer) {
	s.RegisterService(&Ligolo_ServiceDesc, srv)
}

func _Ligolo_Join_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LigoloServer).Join(m, &ligoloJoinServer{stream})
}

type Ligolo_JoinServer interface {
	Send(*Event) error
	grpc.ServerStream
}

type ligoloJoinServer struct {
	grpc.ServerStream
}

func (x *ligoloJoinServer) Send(m *Event) error {
	return x.ServerStream.SendMsg(m)
}

func _Ligolo_GetSessions_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).GetSessions(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/GetSessions",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).GetSessions(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RenameSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RenameSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/RenameSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RenameSession(ctx, req.(*RenameSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_KillSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KillSessionReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).KillSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/KillSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).KillSession(ctx, req.(*KillSessionReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_StartRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartRelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).StartRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/StartRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).StartRelay(ctx, req.(*StartRelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_StopRelay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StopRelayReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).StopRelay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/StopRelay",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).StopRelay(ctx, req.(*StopRelayReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_AddRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).AddRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/AddRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).AddRoute(ctx, req.(*AddRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_DelRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRouteReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).DelRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/DelRoute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).DelRoute(ctx, req.(*DelRouteReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_AddRedirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddRedirectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).AddRedirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/AddRedirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).AddRedirector(ctx, req.(*AddRedirectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_DelRedirector_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelRedirectorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).DelRedirector(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/DelRedirector",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).DelRedirector(ctx, req.(*DelRedirectorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_RegenCert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegenCertReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).RegenCert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/RegenCert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).RegenCert(ctx, req.(*RegenCertReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_NewOperator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewOperatorReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).NewOperator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/NewOperator",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).NewOperator(ctx, req.(*NewOperatorReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Ligolo_GenerateAgent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateAgentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LigoloServer).GenerateAgent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ligolo.Ligolo/GenerateAgent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LigoloServer).GenerateAgent(ctx, req.(*GenerateAgentReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Ligolo_ServiceDesc is the grpc.ServiceDesc for Ligolo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Ligolo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ligolo.Ligolo",
	HandlerType: (*LigoloServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSessions",
			Handler:    _Ligolo_GetSessions_Handler,
		},
		{
			MethodName: "RenameSession",
			Handler:    _Ligolo_RenameSession_Handler,
		},
		{
			MethodName: "KillSession",
			Handler:    _Ligolo_KillSession_Handler,
		},
		{
			MethodName: "StartRelay",
			Handler:    _Ligolo_StartRelay_Handler,
		},
		{
			MethodName: "StopRelay",
			Handler:    _Ligolo_StopRelay_Handler,
		},
		{
			MethodName: "AddRoute",
			Handler:    _Ligolo_AddRoute_Handler,
		},
		{
			MethodName: "DelRoute",
			Handler:    _Ligolo_DelRoute_Handler,
		},
		{
			MethodName: "AddRedirector",
			Handler:    _Ligolo_AddRedirector_Handler,
		},
		{
			MethodName: "DelRedirector",
			Handler:    _Ligolo_DelRedirector_Handler,
		},
		{
			MethodName: "RegenCert",
			Handler:    _Ligolo_RegenCert_Handler,
		},
		{
			MethodName: "NewOperator",
			Handler:    _Ligolo_NewOperator_Handler,
		},
		{
			MethodName: "GenerateAgent",
			Handler:    _Ligolo_GenerateAgent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Join",
			Handler:       _Ligolo_Join_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protobuf/ligolo.proto",
}
