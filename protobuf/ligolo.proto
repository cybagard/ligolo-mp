syntax = "proto3";

option go_package = "github.com/ttpreport/ligolo-mp/protobuf";

package ligolo;

service Ligolo {
  rpc Join(Empty) returns (stream Event) {}

  rpc GetSessions (Empty) returns (GetSessionsResp) {}
  rpc RenameSession (RenameSessionReq) returns (Empty) {}
  rpc KillSession (KillSessionReq) returns (Empty) {}

  rpc StartRelay (StartRelayReq) returns (Empty) {}
  rpc StopRelay (StopRelayReq) returns (Empty) {}
  
  rpc AddRoute (AddRouteReq) returns (AddRouteResp) {}
  rpc DelRoute (DelRouteReq) returns (Empty) {}

  rpc AddRedirector (AddRedirectorReq) returns (Empty) {}
  rpc DelRedirector (DelRedirectorReq) returns (Empty) {}
  
  rpc RegenCert (RegenCertReq) returns (Empty) {}
  rpc NewOperator (NewOperatorReq) returns (NewOperatorResp) {}

  rpc GenerateAgent (GenerateAgentReq) returns (GenerateAgentResp) {}
}

// [Objects]

message Empty {}

message Error {
  bytes Object = 1;
  string Reason = 2;
}

message Event {
  int32 Type = 1;
  string Data = 2;
}

message Session {
  string ID = 1;
  string Alias = 2;
  string Hostname = 3;
  Tun Tun = 4;
  bool IsConnected = 5;
  bool IsRelaying = 6;
  repeated Interface Interfaces = 7;
  repeated Redirector Redirectors = 8;
}

message Tun {
  string Name = 1;
  repeated Route Routes = 2;
}

message Interface {
  string Name = 1;
  repeated string IPs = 2;
}

message Route {
  string Cidr = 1;
	bool IsLoopback = 2;
}

message Redirector {
  string ID = 1;
  string Protocol = 2;
  string From = 3;
  string To = 4;
}

message Cert {
  string Name = 1;
  string ExpiryDate = 2;
}

// [/Objects]

// [Methods]

message AddRedirectorReq {
  string SessionID = 1;
  string Protocol = 2;
  string From = 3;
  string To = 4;
}

message DelRedirectorReq {
  string SessionID = 1;
  string RedirectorID = 2;
}

message GetSessionsResp {
  repeated Session Sessions = 1;
}

message RenameSessionReq {
  string SessionID = 1;
  string Alias = 2;
}

message StartRelayReq {
  string SessionID = 1;
}

message StopRelayReq {
  string SessionID = 1;
}

message KillSessionReq {
  string SessionID = 1;
}

message AddRouteReq {
  string SessionID = 1;
  Route Route = 2;
  bool Force = 3;
}

message AddRouteResp {
  Session OverlappingSession = 1;
}

message DelRouteReq {
  string SessionID = 1;
  string Cidr = 2;
}

message GenerateAgentReq {
  string Server = 1;
  string GOOS = 2;
  string GOARCH = 3;
  bool Obfuscate = 4;
  string SocksServer = 5; 
  string SocksUser = 6;
  string SocksPass = 7;
}

message GenerateAgentResp {
  bytes AgentBinary = 1;
}

message RegenCertReq {
  string Name = 1;
}

message NewOperatorReq {
  string Name = 1;
  string Server = 2;
  bool IsAdmin = 3;
}

message NewOperatorResp {
  string Name = 1;
  string Server = 2;
  bytes Cert = 3;
  bytes Key = 4;
  bytes CA = 5;
}

// [/Methods]