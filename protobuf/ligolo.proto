syntax = "proto3";

option go_package = "github.com/ttpreport/ligolo-mp/v2/protobuf";

package ligolo;

import "google/protobuf/timestamp.proto";

service Ligolo {
  rpc Join (Empty) returns (stream Event) {}
  rpc GetMetadata (Empty) returns (GetMetadataResp) {}

  rpc GetSessions (Empty) returns (GetSessionsResp) {}
  rpc RenameSession (RenameSessionReq) returns (Empty) {}
  rpc KillSession (KillSessionReq) returns (Empty) {}

  rpc StartRelay (StartRelayReq) returns (Empty) {}
  rpc StopRelay (StopRelayReq) returns (Empty) {}
  
  rpc AddRoute (AddRouteReq) returns (Empty) {}
  rpc EditRoute (EditRouteReq) returns (Empty) {}
  rpc MoveRoute (MoveRouteReq) returns (Empty) {}
  rpc DelRoute (DelRouteReq) returns (Empty) {}

  rpc AddRedirector (AddRedirectorReq) returns (Empty) {}
  rpc DelRedirector (DelRedirectorReq) returns (Empty) {}
  
  rpc GetCerts (Empty) returns (GetCertsResp) {}
  rpc RegenCert (RegenCertReq) returns (Empty) {}

  rpc GetOperators (Empty) returns (GetOperatorsResp) {}
  rpc ExportOperator (ExportOperatorReq) returns (ExportOperatorResp) {}
  rpc AddOperator (AddOperatorReq) returns (AddOperatorResp) {}
  rpc DelOperator (DelOperatorReq) returns (Empty) {}
  rpc PromoteOperator (PromoteOperatorReq) returns (Empty) {}
  rpc DemoteOperator (DemoteOperatorReq) returns (Empty) {}

  rpc GenerateAgent (GenerateAgentReq) returns (GenerateAgentResp) {}

  rpc Traceroute (TracerouteReq) returns (TracerouteResp) {}
}

// [Objects]

message Empty {}

message Error {
  bytes Object = 1;
  string Reason = 2;
}

message Event {
  int32 Type = 1;
  string Data = 2;
}

message Session {
  string ID = 1;
  string Alias = 2;
  string Hostname = 3;
  Tun Tun = 4;
  bool IsConnected = 5;
  bool IsRelaying = 6;
  repeated Interface Interfaces = 7;
  repeated Redirector Redirectors = 8;
  google.protobuf.Timestamp FirstSeen = 9;
  google.protobuf.Timestamp LastSeen = 10;
}

message Tun {
  string Name = 1;
  repeated Route Routes = 2;
}

message Interface {
  string Name = 1;
  repeated string IPs = 2;
}

message Route {
  string ID = 1;
  string Cidr = 2;
	bool IsLoopback = 3;
}

message Redirector {
  string ID = 1;
  string Protocol = 2;
  string From = 3;
  string To = 4;
}

message Cert {
  string Name = 1;
  string ExpiryDate = 2;
  bytes Certificate = 3;
  bytes Key = 4;
}

message Operator {
  string Name = 1;
  bool IsAdmin = 2;
  string Server = 3;
  bool IsOnline = 4;
  Cert Cert = 5;
  bytes CA = 6;
}

message Config {
  string OperatorServer = 1;
  string AgentServer = 2;
}

message Traceroute {
  bool IsInternal = 1;
  string Session = 2;
  string Iface = 3;
  string Via = 4;
}

// [/Objects]

// [Methods]

message AddRedirectorReq {
  string SessionID = 1;
  string Protocol = 2;
  string From = 3;
  string To = 4;
}

message DelRedirectorReq {
  string SessionID = 1;
  string RedirectorID = 2;
}

message GetSessionsResp {
  repeated Session Sessions = 1;
}

message RenameSessionReq {
  string SessionID = 1;
  string Alias = 2;
}

message StartRelayReq {
  string SessionID = 1;
}

message StopRelayReq {
  string SessionID = 1;
}

message KillSessionReq {
  string SessionID = 1;
}

message AddRouteReq {
  string SessionID = 1;
  Route Route = 2;
}

message EditRouteReq {
  string SessionID = 1;
  string RouteID = 2;
  string Cidr = 3;
  bool isLoopback = 4;
}

message MoveRouteReq {
  string OldSessionID = 1;
  string RouteID = 2;
  string NewSessionID = 3;
}

message DelRouteReq {
  string SessionID = 1;
  string RouteID = 2;
}

message GenerateAgentReq {
  string Servers = 1;
  string GOOS = 2;
  string GOARCH = 3;
  bool Obfuscate = 4;
  string ProxyServer = 5;
  bool IgnoreEnvProxy = 6;
}

message GenerateAgentResp {
  bytes AgentBinary = 1;
}

message TracerouteReq {
  string IP = 1;
}

message TracerouteResp {
  repeated Traceroute Trace = 1; 
}

message GetCertsResp {
  repeated Cert Certs = 1;
}

message RegenCertReq {
  string Name = 1;
}

message GetOperatorsResp {
  repeated Operator Operators = 1;
}

message ExportOperatorReq {
  string Name = 1;
}

message ExportOperatorResp {
  Operator Operator = 1;
  bytes Config = 2;
}

message AddOperatorReq {
  Operator Operator = 1;
}

message AddOperatorResp {
  Operator Operator = 1;
}

message DelOperatorReq {
  string Name = 1;
}

message PromoteOperatorReq {
  string Name = 1;
}

message DemoteOperatorReq {
  string Name = 1;
}

message GetMetadataResp{
  Operator Operator = 1;
  Config Config = 2;
}

// [/Methods]